// MIR for `main` after SimplifyCfg-promote-consts

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at $DIR/loop_test.rs:6:11: 6:11
    let _1: ();                          // in scope 0 at $DIR/loop_test.rs:10:5: 12:6
    let mut _2: bool;                    // in scope 0 at $DIR/loop_test.rs:10:8: 10:12
    let mut _3: !;                       // in scope 0 at $DIR/loop_test.rs:10:13: 12:6
    let _4: ();                          // in scope 0 at $DIR/loop_test.rs:11:9: 11:15
    let mut _5: !;                       // in scope 0 at $DIR/loop_test.rs:11:9: 11:15
    let mut _6: !;                       // in scope 0 at $DIR/loop_test.rs:13:5: 16:6
    let mut _7: ();                      // in scope 0 at $DIR/loop_test.rs:6:1: 17:2
    let _8: i32;                         // in scope 0 at $DIR/loop_test.rs:14:13: 14:14
    let _9: ();                          // in scope 0 at $DIR/loop_test.rs:15:9: 15:17
    let mut _10: !;                      // in scope 0 at $DIR/loop_test.rs:15:9: 15:17
    scope 1 {
        debug x => _8;                   // in scope 1 at $DIR/loop_test.rs:14:13: 14:14
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at $DIR/loop_test.rs:10:5: 12:6
        StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12
        _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12
        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6
    }

    bb1: {
        StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:11:9: 11:15
        _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15
        StorageDead(_4);                 // scope 0 at $DIR/loop_test.rs:11:15: 11:16
        StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6
        StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6
        return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2
    }

    bb2: {
        _1 = const ();                   // scope 0 at $DIR/loop_test.rs:12:6: 12:6
        StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6
        StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6
        StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6
        goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6
    }

    bb3: {
        falseUnwind -> [real: bb4, cleanup: bb5]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6
    }

    bb4: {
        StorageLive(_8);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14
        _8 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18
        FakeRead(ForLet(None), _8);      // scope 0 at $DIR/loop_test.rs:14:13: 14:14
        StorageLive(_9);                 // scope 1 at $DIR/loop_test.rs:15:9: 15:17
        StorageDead(_9);                 // scope 1 at $DIR/loop_test.rs:15:17: 15:18
        StorageDead(_8);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6
        goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2
    }
}
