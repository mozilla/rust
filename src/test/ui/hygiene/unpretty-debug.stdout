// check-pass
// compile-flags: -Zunpretty=expanded,hygiene

// Don't break whenever Symbol numbering changes
// normalize-stdout-test "\d+#" -> "0#"

// minimal junk
#![feature /* 0#0 */(no_core)]
#![no_core /* 0#0 */]

macro_rules! foo /* 0#0 */ { ($x : ident) => { y + $x } }

fn bar /* 0#0 */() {
    let x /* 0#0 */ = 1;
    y /* 0#1 */ + x /* 0#0 */
}

fn y /* 0#0 */() { }

/*
Expansions:
ExpnId { krate: crate0, local_id: 0 }: parent: ExpnId { krate: crate0, local_id: 0 }, call_site_ctxt: #0, def_site_ctxt: #0, kind: Root
ExpnId { krate: crate0, local_id: 1 }: parent: ExpnId { krate: crate0, local_id: 0 }, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, "foo")

SyntaxContexts:
#0: parent: #0, outer_mark: (ExpnId { krate: crate0, local_id: 0 }, Opaque)
#1: parent: #0, outer_mark: (ExpnId { krate: crate0, local_id: 1 }, SemiTransparent)
*/
